function Connection(bot, config) {
	this.bot = bot;
	this.client = bot.client;
	this.emitter = bot.emitter;
	this.config = config;

	this.host = null;
	this.pingInterval = config.pingInterval*1000;
	this.pingTimeout = config.pingTimeout*1000;
	this.pingLoop = null;
	this.timeoutTimer = null;

	this.reconnectTimer = null;
	this.reconnectIdx = 0;
	this.reconnectIntervals = config.reconnectIntervals;
	this.reconnectTimeoutTimer = null;
	this.reconnectTimeout = config.reconnectTimeout*1000;

	this.intervalResetTimer = null;
	this.intervalResetTimeout = config.intervalResetTimeout*1000;
}

Connection.prototype.init = function() {
	var self = this;

	this.client.on('PING', function(prefix, server) {
		self.client.send('PONG', ':'+server);
	});

	this.client.on('PONG', function() {
		clearTimeout(self.timeoutTimer);
	});

	this.client.on('001', function() {
		self.emitter.emit('connected');
		clearTimeout(self.reconnectTimeoutTimer);
	});

	this.client.on('002', function(prefix) {
		self.host = prefix.replace(/^:/, '');
		clearInterval(self.pingLoop);
		self.pingLoop = setInterval(function() {
			self.__ping();
		}, self.pingInterval);
	});

	this.client.on('DISCONNECT', function(reason) {
		self.emitter.emit('disconnected', reason);
		self.__disconnected();
	});

	this.client.on('ERROR', function(prefix, error) {
		self.client.disconnect(error);
	});
};

Connection.prototype.__ping = function() {
	var self = this;
	this.client.send('PING', this.host);
	clearTimeout(this.timeoutTimer);

	this.timeoutTimer = setTimeout(function() {
		self.client.onTimeout();
	}, this.pingTimeout);
};

Connection.prototype.__disconnected = function() {
	var self = this;
	clearInterval(self.pingLoop);
	clearTimeout(self.reconnectTimeoutTimer);

	var time = this.reconnectIntervals[this.reconnectIntervals.length-1];
	if (typeof this.reconnectIntervals[this.reconnectIdx] !== 'undefined')
		time = this.reconnectIntervals[this.reconnectIdx++];
	time *= 1000;

	clearTimeout(this.intervalResetTimer);
	this.intervalResetTimer = setTimeout(function() {
		self.reconnectIdx = 0;
	}, this.intervalResetTimeout);

	this.emitter.emit('wait', time);

	clearTimeout(this.reconnectTimer);
	this.reconnectTimer = setTimeout(function() {
		self.__reconnect();
	}, time);
};

Connection.prototype.__reconnect = function() {
	var self = this;

	this.emitter.emit('reconnect');
	this.client.connect(this.bot.config.nick, this.bot.config.user, this.bot.config.real);

	this.reconnectTimeoutTimer = setTimeout(function() {
		self.client.disconnect('Re-connect timeout');
	}, this.reconnectTimeout);
};

module.exports = Connection;
